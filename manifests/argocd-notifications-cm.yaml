apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  context: |
    argocdUrl: https://argocd.pixr.in

  service.webhook.ntfy: |
    url: https://ntfy.pixr.in/argocd
    method: POST
    headers:
      - name: Content-Type
        value: application/json
      # if you need auth, e.g.:
      # - name: Authorization
      #   # use a secret reference, e.g. $ntfy-token
      #   value: "Bearer $ntfy-token"
    # optionally you can set timeout, retries etc depending on version

  template.app-sync-succeeded: |
    # existing email / slack parts (you keep what you have)
    email:
      subject: Application {{.app.metadata.name}} has been successfully synced.
    message: |
      {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
      Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    slack:
      attachments: |
        [{
          "title": "{{ .app.metadata.name}}",
          "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#18be52",
          "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": {{- if .app.spec.source }} "Repository" {{- else if .app.spec.sources }} "Repositories" {{- end }},
              "value": {{- if .app.spec.source }} ":arrow_heading_up: {{ .app.spec.source.repoURL }}" {{- else if .app.spec.sources }} "{{- range $index, $source := .app.spec.sources }}{{ if $index }}\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}" {{- end }},
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            ,
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
          ]
        }]
    # Add webhook block
    webhook:
      ntfy:
        # use POST, or change method if needed
        method: POST
        path: ""  # you can include extra path templating if needed
        body: |
          ‚úÖ Sync Succeeded: {{ .app.metadata.name }}

          üì¶ Revision: {{ .app.status.sync.revision }}
          ‚è∞ Deployed: {{ .app.status.operationState.finishedAt }}
          üîó View: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}

  template.app-sync-failed: |
    email:
      subject: Failed to sync application {{.app.metadata.name}}.
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
      Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    slack:
      attachments: |
        [{
          "title": "{{ .app.metadata.name}}",
          "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#E96D76",
          "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": {{- if .app.spec.source }} "Repository" {{- else if .app.spec.sources }} "Repositories" {{- end }},
              "value": {{- if .app.spec.source }} ":arrow_heading_up: {{ .app.spec.source.repoURL }}" {{- else if .app.spec.sources }} "{{- range $index, $source := .app.spec.sources }}{{ if $index }}\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}" {{- end }},
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            ,
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
          ]
        }]
    webhook:
      ntfy:
        method: POST
        path: ""
        body: |
          ‚ùå Sync Failed: {{ .app.metadata.name }}

          üö® Error: {{ .app.status.operationState.message }}
          üì¶ Revision: {{ .app.status.sync.revision }}
          ‚è∞ Failed: {{ .app.status.operationState.finishedAt }}
          üîó View: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true

  ## 3. Keep your existing triggers (you already have them)
  trigger.on-deployed: |
    - description: Application is synced and healthy. Triggered once per commit.
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-deployed
      when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
        and app.status.health.status == 'Healthy' and (!time.Parse(app.status.health.lastTransitionTime).Add(1
        * time.Minute).Before(time.Parse(app.status.operationState.finishedAt)) or time.Parse(app.status.health.lastTransitionTime).Before(time.Parse(app.status.operationState.startedAt)))
  trigger.on-sync-succeeded: |
    - description: Application syncing has succeeded
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-sync-succeeded
      when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
  trigger.on-sync-failed: |
    - description: Application syncing has failed
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-sync-failed
      when: app.status.operationState != nil and app.status.operationState.phase in ['Error','Failed']
  trigger.on-health-degraded: |
    - description: Application has degraded
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  trigger.on-sync-running: |
    - description: Application is being synced
      oncePer: app.status.operationState?.syncResult?.revision
      send:
      - app-sync-running
      when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
  # (Other triggers remain unchanged)
  trigger.on-deleted: |
    - description: Application is deleted.
      oncePer: app.metadata.name
      send:
      - app-deleted
      when: app.metadata.deletionTimestamp != nil

  template.app-health-degraded: |
    email:
      subject: Application {{.app.metadata.name}} has degraded.
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
      Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    slack:
      attachments: |
        [{
          "title": "{{ .app.metadata.name}}",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#f4c030",
          "fields": [
            {
              "title": "Health Status",
              "value": "{{.app.status.health.status}}",
              "short": true
            },
            {
              "title": {{- if .app.spec.source }} "Repository" {{- else if .app.spec.sources }} "Repositories" {{- end }},
              "value": {{- if .app.spec.source }} ":arrow_heading_up: {{ .app.spec.source.repoURL }}" {{- else if .app.spec.sources }} "{{- range $index, $source := .app.spec.sources }}{{ if $index }}\n{{ end }}:arrow_heading_up: {{ $source.repoURL }}{{- end }}" {{- end }},
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            ,
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
          ]
        }]
    webhook:
      ntfy:
        method: POST
        path: ""
        body: |
          ‚ö†Ô∏è Health Degraded: {{ .app.metadata.name }}

          üè• Health Status: {{ .app.status.health.status }}
          üì¶ Revision: {{ .app.status.sync.revision }}
          ‚è∞ Detected: {{ .app.status.health.lastTransitionTime }}
          üîó View: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}
